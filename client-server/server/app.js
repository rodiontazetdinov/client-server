require("dotenv").config();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = process.env.PORT || 8000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
const keywordUrls = require("./urls.js");
const fs = require("fs");
const express = require("express");
const cors = require("cors");
const app = express();
const createServer = require("http").createServer;

const path = require("path");
const Server = require("socket.io").Server;
const server = createServer(app);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ Socket.IO
const io = new Server(server, {
  cors: ALLOWED_ORIGIN, // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–¥–æ–º–µ–Ω—ã) –¥–ª—è CORS
  serveClient: false, // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ Socket.IO
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Socket.IO
io.on("connection", (socket) => {
  console.log("–∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è");

  socket.on("request-data", (inputData) => {
    console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", inputData);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const responseData = keywordUrls[inputData] ? keywordUrls[inputData] : [];
    io.emit("response-data", responseData);
  });
});

io.on("disconnect", () => {
  console.log("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è");
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
app.use(cors()); // –í–∫–ª—é—á–µ–Ω–∏–µ CORS

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
app.get("/files/:file", (req, res) => {
  console.log("–ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å");

  const filePath = __dirname + "/files/" + req.params.file;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  const fileStats = fs.statSync(filePath);
  const fileSize = fileStats.size;
  console.log(filePath);

  // –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫
  const downloadSpeedPerThread = Math.floor(fileSize / maxThreads);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTTP –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–∞
  res.setHeader("Content-Length", fileSize);

  // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
  for (let i = 0; i < maxThreads; i++) {
    const startByte = i * downloadSpeedPerThread;
    const endByte = (i + 1) * downloadSpeedPerThread - 1;

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const fileStream = fs.createReadStream(filePath);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    fileStream.on("error", (err) => {
      console.log(err);
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (Content-Type) –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞ –≤ –æ—Ç–≤–µ—Ç HTTP
    res.setHeader("Content-Type", "image/jpeg");
    fileStream.pipe(res);
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  console.log(`üöÄ Server started on port ${PORT}`);
});
